; Test cases for template test
; [section] - section 
; 'template' = 'expect result' - test case
; other lines are ignored
; Data is:
;    Item('bool', True),
;    Item('float', 10.5),
;    Item('int', 10),
;    Item('str', 'string'),
;    Item('datetime', EncodeDateTime(2000, 1, 2, 3, 4, 5, 6)),
;    Item('arr', ['Sub1', 'Sub2']),
;  Item('map', [
;    Item('field1', 10),
;    Item('field2', 'foo')
;  ])

; Special constructions
; TODO: none?
[special]
'' = ''
'{* comment *}' = ''
'{literal} {}{} {/literal}' = ' {}{} '
'{ldelim}{rdelim}' = '{}'
'{$smarty.ldelim}{$smarty.rdelim}' = '{}'

; Simple variables output
; TODO: none?
[vars]
'{$test.null}' = ''
'{$test.bool}' = '1'
'{$test.float}' = '10.5'
'{$test.int}' = '10'
'{$test.str}' = 'string'
'{$test.datetime}' = '02.01.2000 03:04:05'
'{$test.datetime|date_format:"longdate"}' = '02.01.2000 03:04:05'
'{$test.datetime|date_format:"shortdate"}' = '02.01.2000'
'{$test.datetime|date_format:"shorttime"}' = '03:04'
'{$test.datetime|date_format:"longtime"}' = '03:04:05'
'{$test.arr}' = 'Array'
'{$test.arr[0]}' = 'Sub1'
'{$test.map.field1}' = '10'

; Modifiers
; TODO: all remaining
[mods]
'{$test.str|upper}' = 'STRING'
'{$test.str|lower|cat:"boo"}' = 'stringboo'

; Functions
; TODO: all remaining; custom functions
[functions]
'{upper_case($test.str)}' = 'STRING'
'{is_array($test.arr)}' = '1'
'{array_length($test.arr)}' = '2'
'{print($test.str,$test.int)}' = 'string10'
'{ifthen($test.bool, "t", "f")}' = 't'

; Control constructions
; TODO: foreachelse, foreach.show&.inforeach, {capturearray}, {releasearray}, {ifempty},{elseifempty},{else}
[control]
'{if $test.int = 10}yes{else}no{/if}' = 'yes'
'{if $test.int = 11}yes{else}no{/if}' = 'no'
'{if $test.int + 1 = 11}yes{else}no{/if}' = 'yes'
'{if $test.str = "string"}yes{else}no{/if}' = 'yes'
'{if $test.nonexist}yes1{elseif $test.bool}yes2{/if}' = 'yes2'

'{ifdef $test.str}yes{else}no{/if}' = 'yes'

'{foreach from=$test.arr item=aItem}{$smarty.foreach.current.iteration}/{$smarty.foreach.current.total}.{$aItem};{/foreach}' = '1/2.Sub1;2/2.Sub2;'
'{foreach from=$test.map item=aItem key=aKey}{$smarty.foreach.current.iteration}){$aKey}:{$aItem};{/foreach}' = '1)field1:10;2)field2:foo;'
'{foreach from=$test.arr}{if $smarty.foreach.current.first}first{/if};{if $smarty.foreach.current.first}last{/if}' = 'first;last;'